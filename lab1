#include <iostream> 
#include <vector> 
#include <cmath> 
#include <iomanip> 
 
using namespace std; 
  
void printMatrix(const vector<vector<double>>& matrix) { 
    cout << fixed << setprecision(2);  
 
    for (const auto& row : matrix) { 
        for (const auto& elem : row) { 
            cout << setw(8) << elem;  
        } 
        cout << endl; 
    } 
} 
 
void printVector(const vector<double>& vector) { 
    for (const auto& elem : vector) { 
        cout << elem << endl; 
    } 
} 
 
vector<double> computeResidualVector(const vector<vector<double>>& A, const vector<double>& x, const vector<double>& b) { 
    vector<double> residualVector(b.size(), 0.0); 
    for (size_t i = 0; i < A.size(); ++i) { 
        for (size_t j = 0; j < A[i].size(); ++j) { 
            residualVector[i] += A[i][j] * x[j]; 
        } 
        residualVector[i] -= b[i]; 
    } 
    return residualVector; 
} 
 
double computeResidualNorm(const vector<double>& residualVector) { 
    double norm = 0.0; 
    for (const auto& elem : residualVector) { 
        norm += elem * elem; 
    } 
    return sqrt(norm); 
} 
 
 
vector<double> solveSystem(vector<vector<double>>& A, vector<double>& b)  
{ 
    const size_t n = A.size(); 
 
    for (size_t i = 0; i < n; ++i) { 
 
        size_t maxRow = i; 
        for (size_t k = i + 1; k < n; ++k) { 
            if (abs(A[k][i]) > abs(A[maxRow][i])) { 
                maxRow = k; 
            } 
        } 
 
        swap(A[i], A[maxRow]); 
        swap(b[i], b[maxRow]); 
 
        for (size_t k = i + 1; k < n; ++k) { 
            double factor = A[k][i] / A[i][i]; 
            for (size_t j = i; j < n; ++j) { 
                A[k][j] -= factor * A[i][j]; 
            } 
            b[k] -= factor * b[i]; 
        } 
    } 
 
    vector<double> x(n, 0.0); 
    for (int i = n - 1; i >= 0; --i) { 
        x[i] = b[i] / A[i][i]; 
        for (int k = i - 1; k >= 0; --k) { 
            b[k] -= A[k][i] * x[i]; 
        } 
    } 
 
    return x; 
} 
 
int main() { 
 
    vector<vector<double>> A = { {8.64, 1.71, 5.42}, 
                                {-6.39, 4.25, 1.84}, 
                                {4.21, 7.92, -3.41} }; 
    vector<double> b = { 10.21, 3.41, 12.29 }; 
 
    vector<vector<double>> originalA = A; 
    vector<double> originalB = b; 
 
    vector<double> solution = solveSystem(A, b); 
 
    // Вывод решения 
    cout << "Решение системы:" << endl; 
    printVector(solution); 
 
 
    vector<double> residualVector = computeResidualVector(originalA, solution, originalB); 
    double residualNorm = computeResidualNorm(residualVector); 
 
 
    cout << "Вектор невязки:" << endl; 
    printVector(residualVector); 
 
    cout << "Норма вектора невязки: " << residualNorm << endl; 
 
    // Решение вспомогательной системы 
    vector<double> auxiliarySolution = solveSystem(originalA, originalB); 
 
    // Вычисление относительной погрешности 
    double relativeError = computeResidualNorm(computeResidualVector(originalA, auxiliarySolution, originalB)) / residualNorm; 
 
    cout << "Относительная погрешность: " << relativeError << endl; 
 
    return 0; 
}
